
from camel.agents import TaskPlannerAgent
from camel.prompts import TextPrompt
from StoryGlossary import StoryGlossary
import Prompts


from datetime import datetime


def split_scenes(all_scenes: str) -> list[str]:
    """Splits a long text containing multiple scenes into a list of individual scene prompts.

    The function attempts to split the text using either English ("New Scene") 
    or German ("Neue Szene") markers. Leading empty strings are removed.

    Args:
        all_scenes (str): A single string containing all scenes concatenated 
            together, separated by "New Scene" or "Neue Szene".

    Returns:
        list[str]: A list of individual scene strings, with empty entries removed.
    """    
    scene_prompts = all_scenes.strip().split("New Scene")
    scene_prompts = all_scenes.strip().split("Neue Szene")
    if scene_prompts[0].strip() == '':
        scene_prompts.pop(0)
    return scene_prompts


## approach of loading the json memory file into the task planner prompt: 
def set_planner_prompt(story_glossary: StoryGlossary, scene_number: int) -> TextPrompt: 
    """Generates a TextPrompt for planning a specific scene based on a StoryGlossary.

    This function extracts the setting, characters, and plot from a StoryGlossary 
    instance and formats them into a scene planning prompt that can be used by 
    a planner or writer agent. If any component is missing, a placeholder instruction 
    is used instead. The `scene_number` indicates which scene is being planned.

    Args:
        story_glossary (StoryGlossary): The story glossary containing metadata, 
            characters, setting, and plot.
        scene_number (int): The number of the scene to be planned (1-based index).

    Returns:
        TextPrompt: A formatted text prompt ready for input into a scene planning agent.
    """   
    setting = StoryGlossary.get_setting(story_glossary) or "Make something up that fits the characters and the plot."
    characters = StoryGlossary.get_characters(story_glossary) or "Make up characters that fit the setting and plot."
    plot = StoryGlossary.get_plot(story_glossary) or "Make up a plot that fits both the setting and the characters."

    return Prompts.scene_planning_prompt.format(
        setting=setting, 
        characters=characters,
        plot=plot,
        scene_number=scene_number
    )


def run_planner(task_master: TaskPlannerAgent, story_glossary: StoryGlossary, scene_number: int) -> list[str]:
    """Generates a list of scene prompts using a TaskPlannerAgent and a StoryGlossary.

    This function uses a planner agent to create a set of scene prompts for a 
    specific scene number. It formats a planning prompt based on the story glossary, 
    runs the planner agent, and splits the returned text into individual scenes.

    Args:
        task_master (TaskPlannerAgent): The agent responsible for planning scenes.
        story_glossary (StoryGlossary): The story glossary containing characters, 
            setting, and plot information.
        scene_number (int): The index of the scene to plan (1-based).

    Returns:
        list[str]: A list of individual scene prompts generated by the planner.
    """    
    planner_prompt: TextPrompt = set_planner_prompt(story_glossary, scene_number)

    all_scenes = task_master.run(planner_prompt)
    scene_prompts : list[str] = split_scenes(all_scenes)
    print(f"Scene writing prompts: {all_scenes}")

    return scene_prompts
